// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the Software), to deal 
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
// IN THE SOFTWARE

#include <TensorFlowLite_ESP32.h>

#include "tensorflow/lite/experimental/micro/kernels/all_ops_resolver.h"
#include "tensorflow/lite/experimental/micro/micro_error_reporter.h"
#include "tensorflow/lite/experimental/micro/micro_interpreter.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/version.h"
#include "model_data.h"

#include "predictor.h"
#include "temp_sensor.h"
#include "database.h"

// There is testing and debugging code included in this program. These should
// stay commeneted out for general use of the temperature monitor. It can be
// useful to test the model the first time the monintor is set up to make sure
// it's working as expected.

// #define TESTING
#define DEBUG

// Globals, used for compatibility with Arduino-style sketches.
namespace {
tflite::ErrorReporter* error_reporter = nullptr;
const tflite::Model* model = nullptr;
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* input = nullptr;
TfLiteTensor* output = nullptr;
int inference_count = 0;

// Create an area of memory to use for input, output, and intermediate arrays.
const int kModelArenaSize = 8 * 1024;
// Extra headroom for model + alignment + future interpreter changes.
const int kExtraArenaSize = 560 + 16 + 100;
const int kTensorArenaSize = kModelArenaSize + kExtraArenaSize;
uint8_t tensor_arena[kTensorArenaSize];
}  // namespace

// Variables from training notebook
const int input_size = 720;
const float threshold = 0.077;
const float min_val = -21.75;
const float max_val = 4.3125;
#ifndef TESTING
float x_val[input_size];
#endif
int accumulator = 0;
temp_sensor tmp;
database temperature("temperature");
database alert("temp_alert");

#ifdef DEBUG
database error("MAE");
#endif

void setup(){
  // Set up logging
  static tflite::MicroErrorReporter micro_error_reporter;
  error_reporter = &micro_error_reporter;

  // Map the model into a usable data structure. This doesn't involve any
  // copying or parsing, it's a very lightweight operation.
  model = tflite::GetModel(model_tflite);
  if (model->version() != TFLITE_SCHEMA_VERSION) {
        error_reporter->Report(
        "Model provided is schema version %d not equal "
        "to supported version %d.",
        model->version(), TFLITE_SCHEMA_VERSION);
    return;
  }
  // This pulls in all the operation implementations we need.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::ops::micro::AllOpsResolver resolver;

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
  interpreter = &static_interpreter;

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
  if (allocate_status != kTfLiteOk) {
    error_reporter->Report("AllocateTensors() failed");
    return;
  }

  // Obtain pointers to the model's input and output tensors.
  input = interpreter->input(0);
  output = interpreter->output(0);

  Serial.begin(9600);

    // Initialize the temperature sensor and databases.
  tmp.init();
  temperature.init();
  alert.init();
  #ifdef DEBUG
  error.init();
  #endif
}

#ifdef TESTING
float x_val[] = {3.788968920707702637e-01,3.788968920707702637e-01,3.812949657440185547e-01,3.788968920707702637e-01,3.788968920707702637e-01,3.812949657440185547e-01,3.812949657440185547e-01,3.836930394172668457e-01,3.836930394172668457e-01,3.836930394172668457e-01,3.860911130905151367e-01,3.860911130905151367e-01,3.860911130905151367e-01,3.884892165660858154e-01,3.884892165660858154e-01,3.884892165660858154e-01,3.908872902393341064e-01,3.908872902393341064e-01,3.908872902393341064e-01,3.908872902393341064e-01,3.908872902393341064e-01,3.908872902393341064e-01,3.932853639125823975e-01,3.932853639125823975e-01,3.932853639125823975e-01,3.956834673881530762e-01,3.956834673881530762e-01,3.956834673881530762e-01,3.956834673881530762e-01,3.980815410614013672e-01,3.980815410614013672e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.004796147346496582e-01,4.028776884078979492e-01,4.028776884078979492e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.076738655567169189e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.052757918834686279e-01,4.076738655567169189e-01,4.100719392299652100e-01,4.100719392299652100e-01,4.100719392299652100e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.124700129032135010e-01,4.148681163787841797e-01,4.148681163787841797e-01,4.172661900520324707e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.196642637252807617e-01,4.220623373985290527e-01,4.220623373985290527e-01,4.220623373985290527e-01,4.220623373985290527e-01,4.244604408740997314e-01,4.268585145473480225e-01,4.268585145473480225e-01,4.268585145473480225e-01,4.268585145473480225e-01,4.292565882205963135e-01,4.268585145473480225e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.292565882205963135e-01,4.316546618938446045e-01,4.316546618938446045e-01,4.316546618938446045e-01,4.340527653694152832e-01,4.340527653694152832e-01,4.340527653694152832e-01,4.364508390426635742e-01,4.364508390426635742e-01,4.364508390426635742e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.388489127159118652e-01,4.412470161914825439e-01,4.412470161914825439e-01,4.412470161914825439e-01,4.436450898647308350e-01,4.436450898647308350e-01,4.436450898647308350e-01,4.460431635379791260e-01,4.460431635379791260e-01,4.460431635379791260e-01,4.460431635379791260e-01,4.484412372112274170e-01,4.484412372112274170e-01,4.484412372112274170e-01,4.484412372112274170e-01,4.484412372112274170e-01,4.484412372112274170e-01,4.508393406867980957e-01,4.508393406867980957e-01,4.508393406867980957e-01,4.508393406867980957e-01,4.532374143600463867e-01,4.556354880332946777e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.580335617065429688e-01,4.556354880332946777e-01,4.508393406867980957e-01,4.484412372112274170e-01,4.436450898647308350e-01,4.388489127159118652e-01,4.340527653694152832e-01,4.292565882205963135e-01,4.268585145473480225e-01,4.220623373985290527e-01,4.148681163787841797e-01,4.100719392299652100e-01,4.076738655567169189e-01,4.028776884078979492e-01,3.980815410614013672e-01,3.956834673881530762e-01,3.908872902393341064e-01,3.860911130905151367e-01,3.836930394172668457e-01,3.788968920707702637e-01,3.764987885951995850e-01,3.717026412487030029e-01,3.669064640998840332e-01,3.669064640998840332e-01,3.621103167533874512e-01,3.573141396045684814e-01,3.549160659313201904e-01,3.525179922580718994e-01,3.501199185848236084e-01,3.477218151092529297e-01,3.453237414360046387e-01,3.429256677627563477e-01,3.381294906139373779e-01,3.357314169406890869e-01,3.309352397918701172e-01,3.285371661186218262e-01,3.237410187721252441e-01,3.237410187721252441e-01,3.213429152965545654e-01,3.165467679500579834e-01,3.141486942768096924e-01,3.141486942768096924e-01,3.093525171279907227e-01,3.069544434547424316e-01,3.045563697814941406e-01,3.021582663059234619e-01,2.997601926326751709e-01,2.997601926326751709e-01,2.949640154838562012e-01,2.925659418106079102e-01,2.925659418106079102e-01,2.877697944641113281e-01,2.853716909885406494e-01,2.829736173152923584e-01,2.829736173152923584e-01,2.781774699687957764e-01,2.757793664932250977e-01,2.733812928199768066e-01,2.733812928199768066e-01,2.733812928199768066e-01,2.685851454734802246e-01,2.637889683246612549e-01,2.637889683246612549e-01,2.589927911758422852e-01,2.589927911758422852e-01,2.541966438293457031e-01,2.517985701560974121e-01,2.517985701560974121e-01,2.470023930072784424e-01,2.470023930072784424e-01,2.422062307596206665e-01,2.422062307596206665e-01,2.398081570863723755e-01,2.398081570863723755e-01,2.350119948387145996e-01,2.326139062643051147e-01,2.326139062643051147e-01,2.278177440166473389e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.206235080957412720e-01,2.206235080957412720e-01,2.182254195213317871e-01,2.182254195213317871e-01,2.158273309469223022e-01,2.134292572736740112e-01,2.110311686992645264e-01,2.110311686992645264e-01,2.086330950260162354e-01,2.062350064516067505e-01,2.062350064516067505e-01,2.062350064516067505e-01,2.014388442039489746e-01,2.014388442039489746e-01,1.990407705307006836e-01,1.966426819562911987e-01,1.966426819562911987e-01,1.918465197086334229e-01,1.894484460353851318e-01,1.894484460353851318e-01,1.846522837877273560e-01,1.846522837877273560e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.798561215400695801e-01,1.798561215400695801e-01,1.798561215400695801e-01,1.798561215400695801e-01,1.798561215400695801e-01,1.774580329656600952e-01,1.726618707180023193e-01,1.726618707180023193e-01,1.702637821435928345e-01,1.702637821435928345e-01,1.702637821435928345e-01,1.678657084703445435e-01,1.654676198959350586e-01,1.654676198959350586e-01,1.630695462226867676e-01,1.630695462226867676e-01,1.606714576482772827e-01,1.582733839750289917e-01,1.582733839750289917e-01,1.582733839750289917e-01,1.582733839750289917e-01,1.534772217273712158e-01,1.510791331529617310e-01,1.510791331529617310e-01,1.486810594797134399e-01,1.462829709053039551e-01,1.462829709053039551e-01,1.438848972320556641e-01,1.414868086576461792e-01,1.414868086576461792e-01,1.390887349843978882e-01,1.366906464099884033e-01,1.366906464099884033e-01,1.342925727367401123e-01,1.342925727367401123e-01,1.318944841623306274e-01,1.294963955879211426e-01,1.294963955879211426e-01,1.270983219146728516e-01,1.270983219146728516e-01,1.270983219146728516e-01,1.247002407908439636e-01,1.223021596670150757e-01,1.223021596670150757e-01,1.223021596670150757e-01,1.199040785431861877e-01,1.175059974193572998e-01,1.175059974193572998e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.127098351716995239e-01,1.103117540478706360e-01,1.103117540478706360e-01,1.079136654734611511e-01,1.079136654734611511e-01,1.079136654734611511e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.031175032258033752e-01,1.031175032258033752e-01,1.007194221019744873e-01,9.832134097814559937e-02,9.832134097814559937e-02,9.592325985431671143e-02,9.592325985431671143e-02,9.352517873048782349e-02,9.352517873048782349e-02,9.352517873048782349e-02,9.352517873048782349e-02,9.112709760665893555e-02,9.112709760665893555e-02,8.872901648283004761e-02,8.633093535900115967e-02,8.633093535900115967e-02,8.393285423517227173e-02,8.393285423517227173e-02,8.393285423517227173e-02,8.153477311134338379e-02,8.153477311134338379e-02,8.153477311134338379e-02,8.153477311134338379e-02,7.913669198751449585e-02,7.913669198751449585e-02,7.673861086368560791e-02,7.673861086368560791e-02,7.434052973985671997e-02,7.434052973985671997e-02,7.434052973985671997e-02,7.194244861602783203e-02,7.194244861602783203e-02,7.194244861602783203e-02,7.194244861602783203e-02,6.954436749219894409e-02,6.954436749219894409e-02,6.954436749219894409e-02,6.714628636837005615e-02,6.474819779396057129e-02,6.474819779396057129e-02,6.235012039542198181e-02,6.235012039542198181e-02,6.235012039542198181e-02,6.235012039542198181e-02,6.235012039542198181e-02,5.995203927159309387e-02,5.995203927159309387e-02,5.755395814776420593e-02,5.755395814776420593e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.275779217481613159e-02,5.035971105098724365e-02,5.035971105098724365e-02,5.035971105098724365e-02,5.035971105098724365e-02,4.796162992715835571e-02,4.796162992715835571e-02,4.796162992715835571e-02,4.796162992715835571e-02,4.556354880332946777e-02,4.316546767950057983e-02,4.076738655567169189e-02,4.076738655567169189e-02,4.076738655567169189e-02,3.836930543184280396e-02,3.836930543184280396e-02,3.597122430801391602e-02,3.597122430801391602e-02,3.597122430801391602e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,3.117506019771099091e-02,2.877697907388210297e-02,2.637889608740806580e-02,2.398081496357917786e-02,2.398081496357917786e-02,2.158273383975028992e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,1.918465271592140198e-02,2.158273383975028992e-02,2.158273383975028992e-02,2.158273383975028992e-02,2.398081496357917786e-02,2.637889608740806580e-02,2.637889608740806580e-02,2.877697907388210297e-02,2.877697907388210297e-02,3.117506019771099091e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.357314318418502808e-02,3.597122430801391602e-02,3.836930543184280396e-02,3.836930543184280396e-02,4.076738655567169189e-02,4.076738655567169189e-02,4.316546767950057983e-02,4.316546767950057983e-02,4.556354880332946777e-02,4.556354880332946777e-02,4.796162992715835571e-02,5.035971105098724365e-02,5.035971105098724365e-02,5.275779217481613159e-02,5.275779217481613159e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.515587702393531799e-02,5.755395814776420593e-02,5.995203927159309387e-02,5.995203927159309387e-02,6.235012039542198181e-02,6.235012039542198181e-02,6.474819779396057129e-02,6.714628636837005615e-02,6.714628636837005615e-02,6.714628636837005615e-02,6.714628636837005615e-02,6.954436749219894409e-02,6.954436749219894409e-02,7.194244861602783203e-02,7.434052973985671997e-02,7.434052973985671997e-02,7.673861086368560791e-02,7.673861086368560791e-02,7.913669198751449585e-02,7.913669198751449585e-02,8.153477311134338379e-02,8.153477311134338379e-02,8.393285423517227173e-02,8.393285423517227173e-02,8.633093535900115967e-02,8.633093535900115967e-02,8.872901648283004761e-02,8.872901648283004761e-02,8.872901648283004761e-02,9.112709760665893555e-02,9.112709760665893555e-02,9.112709760665893555e-02,9.352517873048782349e-02,9.592325985431671143e-02,9.592325985431671143e-02,9.592325985431671143e-02,9.832134097814559937e-02,9.832134097814559937e-02,9.832134097814559937e-02,9.832134097814559937e-02,1.007194221019744873e-01,1.007194221019744873e-01,1.007194221019744873e-01,1.007194221019744873e-01,1.031175032258033752e-01,1.031175032258033752e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.055155843496322632e-01,1.079136654734611511e-01,1.103117540478706360e-01,1.103117540478706360e-01,1.103117540478706360e-01,1.127098351716995239e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.151079162955284119e-01,1.175059974193572998e-01,1.175059974193572998e-01,1.175059974193572998e-01,1.175059974193572998e-01,1.199040785431861877e-01,1.199040785431861877e-01,1.199040785431861877e-01,1.223021596670150757e-01,1.223021596670150757e-01,1.247002407908439636e-01,1.247002407908439636e-01,1.270983219146728516e-01,1.270983219146728516e-01,1.294963955879211426e-01,1.294963955879211426e-01,1.294963955879211426e-01,1.318944841623306274e-01,1.342925727367401123e-01,1.342925727367401123e-01,1.366906464099884033e-01,1.366906464099884033e-01,1.390887349843978882e-01,1.390887349843978882e-01,1.390887349843978882e-01,1.414868086576461792e-01,1.414868086576461792e-01,1.438848972320556641e-01,1.438848972320556641e-01,1.438848972320556641e-01,1.462829709053039551e-01,1.486810594797134399e-01,1.486810594797134399e-01,1.486810594797134399e-01,1.486810594797134399e-01,1.510791331529617310e-01,1.510791331529617310e-01,1.510791331529617310e-01,1.534772217273712158e-01,1.534772217273712158e-01,1.534772217273712158e-01,1.558752954006195068e-01,1.558752954006195068e-01,1.582733839750289917e-01,1.582733839750289917e-01,1.582733839750289917e-01,1.606714576482772827e-01,1.606714576482772827e-01,1.606714576482772827e-01,1.606714576482772827e-01,1.630695462226867676e-01,1.630695462226867676e-01,1.654676198959350586e-01,1.678657084703445435e-01,1.678657084703445435e-01,1.702637821435928345e-01,1.702637821435928345e-01,1.702637821435928345e-01,1.726618707180023193e-01,1.726618707180023193e-01,1.726618707180023193e-01,1.726618707180023193e-01,1.726618707180023193e-01,1.750599592924118042e-01,1.750599592924118042e-01,1.774580329656600952e-01,1.774580329656600952e-01,1.774580329656600952e-01,1.774580329656600952e-01,1.798561215400695801e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.822541952133178711e-01,1.846522837877273560e-01,1.846522837877273560e-01,1.846522837877273560e-01,1.870503574609756470e-01,1.894484460353851318e-01,1.894484460353851318e-01,1.894484460353851318e-01,1.918465197086334229e-01,1.918465197086334229e-01,1.918465197086334229e-01,1.942446082830429077e-01,1.942446082830429077e-01,1.942446082830429077e-01,1.942446082830429077e-01,1.966426819562911987e-01,1.966426819562911987e-01,1.990407705307006836e-01,1.990407705307006836e-01,2.014388442039489746e-01,2.014388442039489746e-01,2.014388442039489746e-01,2.038369327783584595e-01,2.038369327783584595e-01,2.038369327783584595e-01,2.038369327783584595e-01,2.038369327783584595e-01,2.062350064516067505e-01,2.062350064516067505e-01,2.062350064516067505e-01,2.086330950260162354e-01,2.086330950260162354e-01,2.086330950260162354e-01,2.110311686992645264e-01,2.110311686992645264e-01,2.110311686992645264e-01,2.134292572736740112e-01,2.134292572736740112e-01,2.134292572736740112e-01,2.158273309469223022e-01,2.158273309469223022e-01,2.182254195213317871e-01,2.182254195213317871e-01,2.206235080957412720e-01,2.206235080957412720e-01,2.230215817689895630e-01,2.230215817689895630e-01,2.230215817689895630e-01,2.230215817689895630e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.254196703433990479e-01,2.278177440166473389e-01,2.278177440166473389e-01,2.278177440166473389e-01,2.278177440166473389e-01,2.302158325910568237e-01,2.302158325910568237e-01,2.326139062643051147e-01,2.326139062643051147e-01,2.326139062643051147e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.350119948387145996e-01,2.374100685119628906e-01,2.374100685119628906e-01,2.374100685119628906e-01,2.398081570863723755e-01,2.398081570863723755e-01,2.398081570863723755e-01,2.422062307596206665e-01,2.422062307596206665e-01,2.422062307596206665e-01,2.446043193340301514e-01,2.446043193340301514e-01,2.446043193340301514e-01,2.446043193340301514e-01,2.470023930072784424e-01,2.470023930072784424e-01,2.470023930072784424e-01,2.470023930072784424e-01,2.494004815816879272e-01,2.494004815816879272e-01,2.517985701560974121e-01,2.517985701560974121e-01,2.517985701560974121e-01,2.517985701560974121e-01,2.541966438293457031e-01,2.541966438293457031e-01,2.565947175025939941e-01,2.565947175025939941e-01,2.565947175025939941e-01,2.565947175025939941e-01,2.565947175025939941e-01,2.565947175025939941e-01,2.589927911758422852e-01,2.589927911758422852e-01,2.613908946514129639e-01,2.613908946514129639e-01,2.613908946514129639e-01,2.637889683246612549e-01,2.637889683246612549e-01,2.637889683246612549e-01,2.661870419979095459e-01,2.661870419979095459e-01,2.661870419979095459e-01,2.661870419979095459e-01,2.661870419979095459e-01,2.661870419979095459e-01,2.685851454734802246e-01,2.685851454734802246e-01,2.685851454734802246e-01,2.709832191467285156e-01,2.709832191467285156e-01,2.733812928199768066e-01,2.733812928199768066e-01};
#endif

void loop()
{   
    #ifndef TESTING

    // Gathers an hours worth of temperature readings from the sensor
    // We also continue to record specific temperatures in our database
    for (int i = 0; i < input_size; i++)
    {
        x_val[i] = tmp.temperature();
        temperature.write(x_val[i]);
        delay(5000);
    }

    // Normalizes the data based on the variables from the training notebook
    for (int i = 0; i< input_size; i++)
    {
        x_val[i] = normalize(x_val[i], max_val, min_val);
        
    }
    #endif

    // Copy the data to the input tensor pointer
    for (int i = 0; i < input_size; i++)
    {
        input->data.f[i] = x_val[i];
    }

    // Run inference, and report any error
    TfLiteStatus invoke_status = interpreter->Invoke();
    if (invoke_status != kTfLiteOk) {
        error_reporter->Report("Invoke failed on x_val: %f\n",
                               static_cast<float*>(x_val));
        return;
    }
    float y_val[input_size];
    
    // Read the predicted y value from the model's output tensor
    for (int i = 0; i < input_size; i++)
    {
        y_val[i] = output->data.f[i];
    }

    float sampleMae = mae(x_val, y_val, input_size);

    if (Serial)
    {
        Serial.print("Mean Absolute Error: ");
        Serial.println(sampleMae, 4);
        #ifdef DEBUG
        error.write(sampleMae);
        #endif
    }

    if (sampleMae > threshold){
        accumulator += 1;
    }
    else if (sampleMae <= threshold)
    {
        accumulator -= 2;
        if (accumulator < 0)
        {
            accumulator = 0;
        }
    }

    if (accumulator > 4)
    {
        Serial.println("anomaly detected");
        alert.write(accumulator);
    }
}